---
version: 3

vars:
  DOMAIN: k8s.dorn.haus
  # renovate: datasource=github-releases depName=siderolabs/talos
  TALOS_VERSION: v1.6.5
  # renovate: datasource=github-releases depName=siderolabs/kubelet
  KUBERNETES_VERSION: v1.29.2
  TALOS_DIR: "{{.ROOT_DIR}}/talos"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"


tasks:
  bootstrap:
    desc: Bootstrap Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: bootstrap-gensecret
      - task: bootstrap-genconfig
      - task: bootstrap-apply
      - task: bootstrap-install
      - task: fetch-kubeconfig
      - talosctl health --server=false

  bootstrap-gensecret:
    desc: Generate Talos secrets
    dir: "{{.TALOS_DIR}}"
    cmds:
      - talhelper gensecret --from-configfile ~/repos/my/lab/dh8/talos/controlplane.yaml > {{.TALHELPER_SECRET_FILE}}
      - task: :sops:.encrypt-file
        vars:
          file: "{{.TALHELPER_SECRET_FILE}}"
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  bootstrap-genconfig:
    desc: Generate Talos configs
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper genconfig
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  bootstrap-apply:
    desc: Apply Talos config on a node
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  bootstrap-install:
    desc: Install Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - echo "Installing Talos... ignore the errors and be patient"
      - until talhelper gencommand bootstrap | bash; do sleep 2; done
      - sleep 2
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  install-apps:
    desc: Bootstrap core apps
    dir: "{{.TALOS_DIR}}"
    cmds:
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s; do sleep 2; done
      - helmfile --file apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s; do sleep 2; done
    preconditions:
      - { msg: "Missing kubeconfig", sh: "test -f {{.KUBECONFIG_FILE}}" }

  upgrade:talos:
    desc: Upgrade Talos on a node to {{.TALOS_VERSION}}
    cmd: talosctl --nodes {{.node}} upgrade --image ghcr.io/siderolabs/installer:{{.TALOS_VERSION}} --preserve=true --reboot-mode=default
    requires:
      vars: ["node"]
    preconditions:
      - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }
    status:
      - talosctl version --nodes {{ .node }} --short | grep 'Tag.*{{ .TALOS_VERSION }}'

  upgrade:k8s:
    desc: Upgrade K8s on a node to {{.KUBERNETES_VERSION}}
    cmd: talosctl --nodes {{.node}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    requires:
      vars: ["node"]
    preconditions:
      - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  fetch-kubeconfig:
    desc: Generate Talos kubeconfig
    dir: "{{.TALOS_DIR}}"
    cmd: until talhelper gencommand kubeconfig --extra-flags "--force" | bash; do sleep 10; done

  reset-soft:
    desc: Resets Talos nodes back to maintenance mode
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash

  reset-hard:
    desc: Wipes Talos nodes entirely so they can be reinstalled by booting into the installer
    prompt: DANGER!!! This will destroy your cluster and reset the nodes... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash
